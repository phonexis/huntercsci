Stability: a sorting algorithm is stable

Execution time DOES NOT depend on initial arrangement of data => ALWAYS O(n^2)?

Understanding O(n^2): If the size of the input by factor of 100
Execution time increases by factor of 10,000
T(100n)=10,000T(n)

Assume n=100,000 and T(n)=17 seconds
Sorting 10,000,000 takes 10,000 times longer or 2 days approximately

Bubble Sort: compare adjacent elements and if necessary swap them
How much work?
First pass:n-1 comparisons or at most n-1 swaps
Second pass:n-2 comparisons or at most n-2 swaps
Third pass:n-3 comparisons or at most n-3 swaps

A swap is usually more than one operation but this simplification does not change the analysis
T(n)=2(n(n-1)/2)=O()?
T(n)=n^2 -n=O()?

Insertion sort: pick first element in unsorted region and put it in right place in sorted region
Worst Case: O(n^2) comparisons and data moves
Best Case: O(n) comparisons and data moves


