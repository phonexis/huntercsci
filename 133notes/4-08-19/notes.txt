 i(int)
  1000
  [97]

int i=3; i has some address
int *p; p is a pointed to an int that has a box of memory
p=1000; put 1000 into this box. The value of p is now 1000

 p(int)
  1000
 [1000]
std::cout << p; //this line would return 1000

* -> dereference
& -> address of
In C++, it is more difficultto create an int pointer

Let i=value in the box; &=address of the box; *=the value in the box at the address

//p=new int(7);
std::cout << *p; //when you try to access this memory/the memory you don't have access to, you will get errors and these errors are unpredictable

C++ compilers do not guarantee and initialization of 0 for variables

if we just do p=new int, you're saying "I want a new block of memory to hold this" This is on the heap. Not the stack.
This new int returns this new address

int *p;
p=new int;
*p=10;
p=new int(7);

  p      ->    2000     ->    2000
[2000]         [10]           [7]

-MEMORY LEAKS-
smart pointer makes it easier to not mess up memory.
Rust/python/etc does memory management for you.

Therefore, when you're done with p, you have to delete it (delete the memory address) such that this memory can be used again and a memory leak is prevented

int i=97;
int *a;
a=new int[10]; this is going to give use 10 blocks of memory with each block large enough to hold an int. We can access this like an array

a[i] <=> *(a+i) These are synonyms since it knows a is a pointer to a, move over by i. Look at the address of a and more over by i
new is making a new block of memory.
You want to free thatmemory using delete by the end of your program because not all operating systems will clear the memory for you

The idea behind a struct(short for structure) is that one thing consisting of many subthings.
class -> struct w/ associated functions
In earlier languages, you had primatives. Parallel arrays (making an array for each data ex: 2 arrays for coordinate points (x,y) x being one array and y being another)

struct vector{
 int x;
 int y;
 std::string name;
};

int main(){
 struct s s1;
 s1.x=50;
 s1.y=30;
 s1.name="hello";

 struct vector s2;
 s2=s1; //copies over s1 into s2

 s1.name="New Name";

 struct vector *vp;
 vp=&s1; //vp is the memory address of s1

 /*
 s1: x=50,y=30,name=hello
 s2: x=50,y=30,name=hello
 */
 std::cout << *vp.name;//this is an error because struct vp is a pointer and name does not follow under that struct. and the . takes presedence over *
 std::cout << (*vp).name; //this works

 struct vector s3={2,20,"Theo"};
 std::cout << s3.name << "\n";
 std::string s="myname";
 struct vector s4 = {x:10,y:100,name:"s"};
 std::cout <<s4.name << "\n";

 struct vector *vp2=new struct vector({1,2,"something"});
 std::cout << vp2->name << "\n";
 struct vector *vp3 = new struct vector;
 vp3->name = "horatio";

 std::cout << vp3->name << "\n";

 delete vp;
 delete vp2;
 delete vp3;
 return 0;
}

vp->name is the same as (*vp).name
The arrows are a shorthand form.

class c{
 public:
	int x;
	std::string s;
	int f(){ }

};

class c
